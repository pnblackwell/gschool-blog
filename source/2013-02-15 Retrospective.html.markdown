---
title: 3rd Week Retrospective
date: 2013-02-015 13:33 -07:00
tags:
---

It's hard to believe that we're only at week 3.  It feels like we've been doing these projects for a while now.  The techniques that I now have under my belt are things that still seem rather basic- for instance on the last project when I was having diffculty understanding the difference between instance and class variables at a practical level.  I would basically pick one, and then run a test to see if it was the correct way.  Now I understand the difference a bit better and thinking about things in general as class objects seems to be more inuitive.  I'm also making a lot less stupid errors.  It seemed like last week, every other error was an issue that was syntax based like a dangling or missing end.  Now, I'm still running up against errors like the nil class, but we've learned in class that those are common.  In addition- actually what is probably most important is the fact that I'm beginning to have more of a dialogue with error messages. I'm not sure if it's that we are constructing tests and constantly testing against failure, or if it's just a familiarity thing with seeing similar messages and knowing how to correct them, but I dread error messages a lot less.  I see them now as more informative whereas on the last few projects I would write code, run it, and hope that it didn't bring up any errors because I felt a lot less capable of understanding what was wrong.  

In general I'm reassured by my progress because it feels like progress and it feels like these concepts become understood and knowledge becomes acquired through lots of practice.  This is reassuring because at first these concepts seem hard just because they seem hard. At first it's difficult to differentiate whether or not programming is hard because the concepts are incredibly complex, or if it's just complex because it's a new language.  Now I'm seeing how familiarity is a huge part of the game because things that were previously difficult are much less so with just repeated practice.  I'm pretty sure there's no point where any programmer thinks they have the capabilities of the language under their belt, but I think I understand what I'm working toward.  In an environment where Google searches and Stack Overflow are an important part of solving problems, it becomes important to be able to isolate what you don't know and to work with what you know to create something new.  The way I approach Sales Engine shows that I'm definitely making progress on that front and for that I am happy.

The project's style of testing with almost every line of code is completely new to me and it definitely takes longer to get to where you want, but it does have some benefits.  I feel like I understand the code we're writing better because we are concretely testing it every few lines.  I like what that does to the group dynamic- it forces us to reason through what we expect at every turn.  And I suppose if this is what it takes to have good practices, I don't really have much of a choice as to whether or not it's something I'll keep doing.

Going forward I'm really excited about having the ability to use basic ideas like variables, and methods, and tests to create the things that I want to create.  I'm also looking forward to being able to contribute to what other people are doing in a meaningful way.  I'm also finding that I'm interested in the way that programming is filled with multiple ways to arrive at a working program.  When I get better, I'm looking forward to being able to compare methodologies with people and seeing how different minds approach the same problem.  I like that it feels like I'm constantly learning and I'm excited to keep going with that.

